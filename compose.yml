services:
  # PostgreSQL database
  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - '5432:5432'
    networks:
      - libdb_network
    environment:
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: pg_isready -U admin -d postgres
      start_period: 5s
      interval: 3s
      timeout: 3s
      retries: 3
    volumes:
      - postgres_volume:/var/lib/postgresql/data

  # MongoDB database
  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - '27017:27017'
    networks:
      - libdb_network
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      start_period: 5s
      interval: 3s
      timeout: 3s
      retries: 3
    volumes:
      - mongodb_volume:/data/db

  # .NET back-end
  dotnet:
    build:
      context: ./libdb-dotnet/
      dockerfile: Dockerfile
    image: libdb_dotnet:latest
    container_name: dotnet
    ports:
      - '8080:8080'
    networks:
      - libdb_network
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      ENVIRONMENT: PRODUCTION
    healthcheck:
      test: wget -qO- http://localhost:8080/health
      start_period: 3s
      interval: 2s
      timeout: 2s
      retries: 5

  # Node.js back-end
  nodejs:
    build:
      context: ./libdb-nodejs/
      dockerfile: Dockerfile
    image: libdb_nodejs:latest
    container_name: nodejs
    ports:
      - '5000:5000'
    networks:
      - libdb_network
    depends_on:
      mongodb:
        condition: service_healthy
    environment:
      ENVIRONMENT: PRODUCTION
    healthcheck:
      test: wget -qO- http://localhost:5000/health
      start_period: 3s
      interval: 2s
      timeout: 2s
      retries: 5

  # Svelte front-end
  svelte:
    build:
      context: ./libdb-svelte/
      dockerfile: Dockerfile
    image: libdb_svelte:latest
    container_name: svelte
    ports:
      - '3000:3000'
    networks:
      - libdb_network
    depends_on:
      dotnet:
        condition: service_healthy
      nodejs:
        condition: service_healthy
    environment:
      ENVIRONMENT: PRODUCTION

  # Bootstrap
  bootstrap:
    build:
      context: ./bootstrap/
      dockerfile: Dockerfile
    image: libdb_bootstrap:latest
    container_name: bootstrap
    networks:
      - libdb_network
    depends_on:
      - svelte
    environment:
      DOTNET_URI: http://dotnet:8080/
      NODEJS_URI: http://nodejs:5000/

networks:
  libdb_network:
    driver: bridge

volumes:
  postgres_volume:
    driver: local
  mongodb_volume:
    driver: local
